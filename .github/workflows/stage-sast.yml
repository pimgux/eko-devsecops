name: Stage Sast

on:
    workflow_call:
      secrets:
        DEPENDENCYTRACK_APIKEY:
          required: true    
        DEPENDENCYTRACK_HOST:
          required: true  
        FARADAY_HOST:
          required: true    
        FARADAY_PASS:
          required: true  
        FARADAY_USER:
          required: true            
env:
  REPO_NAME: ${{ github.event.repository.name }}  

jobs:

  check-secret:
    name: check-secret
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: horusec
      run: docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v $(pwd):/src public.ecr.aws/roxsross/horusec:v2.9.0 horusec start -p /src -P "$(pwd)" -e="true" -o="json" -O=src/horusec.json || true    
    - uses: actions/setup-python@v4
      with:
        python-version: '3.10' 
    - run: python ./.github/scripts/roxs-security-tools.py horusec.json horusec 
      continue-on-error: true      
    - uses: actions/upload-artifact@v3
      with:
        name: horusec
        path: horusec.json    

  check-DependencyTrack:
    name: check-DependencyTrack
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Installs Dependencies
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    - run: npm install
    - name: Generate BOM
      uses: CycloneDX/gh-node-module-generatebom@v1
      with:
        output: './bom.xml'  
    - uses: actions/upload-artifact@v3
      with:
          name: bom
          path: bom.xml              
    - name: 'Upload DEPENDENCY_TRACK'
      env:
         KEY: ${{ secrets.DEPENDENCYTRACK_APIKEY }}
         HOST: ${{ secrets.DEPENDENCYTRACK_HOST }}
      run: |
        VERSION=`jq -r '.version' ./package.json`
        BOM=`cat bom.xml|base64`
        echo "{ \"projectName\": \"$REPO_NAME\",\"projectVersion\": \"$VERSION\", \"autoCreate\": \"true\", \"bom\": \"$BOM\" }" >bom-payload.json
        curl -s -X "PUT" "$HOST" \
            -H "Content-Type: application/json" \
            -H "X-API-Key: $KEY" \
            -d @bom-payload.json            

  check-trivy:
    name: check-trivy
    runs-on: ubuntu-latest  
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Build an image from Dockerfile
        run: |
          docker build -t trivy-image:${{ github.sha }} .
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: 'trivy-image:${{ github.sha }}'
          format: 'json'
          output: 'trivy-results.json'
          severity: 'HIGH'
          exit-code: '1'
      - uses: actions/upload-artifact@v3
        with:
          name: trivy
          path: trivy-results.json 
      - name: upload faraday
        run: |
          pip install faraday-cli
          faraday-cli auth -f ${{ secrets.FARADAY_HOST }} -u ${{ secrets.FARADAY_USER}} -p "${{ secrets.FARADAY_PASS }}"
          faraday-cli workspace create ${{ github.event.repository.name}}-${{ github.run_number}}
          faraday-cli tool report -w ${{ github.event.repository.name}}-${{ github.run_number}} trivy-results.json                